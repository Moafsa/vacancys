// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  USER
}

enum Status {
  ACTIVE
  INACTIVE
  PENDING
  BLOCKED
}

model User {
  id                String              @id @default(uuid())
  email             String              @unique
  name              String
  password          String
  role              Role                @default(USER)
  status            Status              @default(PENDING)
  isEmailVerified   Boolean             @default(false)
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  lastLoginAt       DateTime?
  avatarUrl         String?
  phone             String?
  location          String?
  bio               String?
  freelancerProfile FreelancerProfile?
  clientProfile     ClientProfile?
  accountVerification AccountVerification?
  sessions          Session[]
  verificationTokens VerificationToken[]
  resetTokens       ResetToken[]
  userRoles         UserRole[]
  userPermissions   UserPermission[]
  moduleAuditLogs   ModuleAuditLog[]

  @@map("users")
}

model FreelancerProfile {
  id               String    @id @default(uuid())
  userId           String    @unique
  headline         String?
  skills           String[]
  hourlyRate       Float?
  availability     String?
  profileComplete  Boolean   @default(false)
  experienceYears  Int?
  englishLevel     String?
  portfolioWebsite String?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  user             User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("freelancer_profiles")
}

model ClientProfile {
  id               String    @id @default(uuid())
  userId           String    @unique
  companyName      String?
  industry         String?
  companySize      String?
  companyWebsite   String?
  profileComplete  Boolean   @default(false)
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  user             User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("client_profiles")
}

model Session {
  id        String    @id @default(uuid())
  userId    String
  token     String    @unique
  userAgent String?
  ipAddress String?
  expiresAt DateTime
  createdAt DateTime  @default(now())
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  id        String    @id @default(uuid())
  userId    String
  token     String    @unique
  expiresAt DateTime
  createdAt DateTime  @default(now())
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("verification_tokens")
}

model ResetToken {
  id        String    @id @default(uuid())
  userId    String
  token     String    @unique
  expiresAt DateTime
  createdAt DateTime  @default(now())
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("reset_tokens")
}

model AccountVerification {
  id                String   @id @default(uuid())
  userId            String   @unique
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  status            VerificationStatus @default(PENDING)
  rejectionReason   String?
  documentUrl       String?
  selfieUrl         String?
  proofOfAddressUrl String?
  documentStatus            VerificationStatus @default(PENDING)
  documentRejectionReason   String?
  proofOfAddressStatus      VerificationStatus @default(PENDING)
  proofOfAddressRejectionReason String?
  selfieStatus              VerificationStatus @default(PENDING)
  selfieRejectionReason     String?
  extractedName     String?
  extractedBirthdate String?
  submittedAt       DateTime @default(now())
  reviewedAt        DateTime?
  approvedAt        DateTime?
  updatedAt         DateTime @updatedAt
}

enum VerificationStatus {
  PENDING
  APPROVED
  REJECTED
}

model Permission {
  id          String   @id @default(uuid())
  name        String   @unique
  description String?
  rolePermissions RolePermission[]
  userPermissions UserPermission[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model RolePermission {
  id           String   @id @default(uuid())
  role         Role     @map("role")
  permissionId String
  permission   Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@unique([role, permissionId])
}

model UserRole {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  role      Role     @map("role")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, role])
}

model UserPermission {
  id           String   @id @default(uuid())
  userId       String
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  permissionId String
  permission   Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@unique([userId, permissionId])
}

model ModuleAuditLog {
  id        String   @id @default(cuid())
  moduleName String
  action    String   // activate, deactivate, configure
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  details   Json?
  timestamp DateTime @default(now())

  @@index([moduleName])
  @@index([userId])
  @@index([timestamp])
} 